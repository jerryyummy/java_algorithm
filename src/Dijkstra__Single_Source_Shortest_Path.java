import java.util.Scanner;public class Dijkstra__Single_Source_Shortest_Path {    private static int N;//???    private static int max;//????????????????    private static int[] visit;//?????????????????????????1??????0    private static int[][] distance;//??????и????????????????????max    private static int[] minDistance;//??????????????????????    private static String[] path;//???????·??    private static int sum=0;//??????·??????    public static void Dijkstra() {        visit[1] = 1;//???????????0        minDistance[1] = 0;        //?????????        for(int l = 2; l <= N; l++) {            int Dtemp = max;//目前最小距离            int k = -1;//k表示当前这一轮添加节点的index            //找到剩余没访问节点距离最小的            for(int i = 2; i <= N; i++) {                if(visit[i] == 0 && distance[1][i] < Dtemp) {                    Dtemp = distance[1][i];//??????????                    k = i;                }            }            visit[k] = 1;//?????????·?????            minDistance[k] = Dtemp;//????????????            //???????????????????????????????????????visit[i]?0??????????            for(int i = 2; i <= N; i++) {                if(visit[i] == 0 && (distance[1][k] + distance[k][i]) < distance[1][i]) {//通过本轮的节点更新其他节点与源节点的距离                    distance[1][i] = distance[1][k] + distance[k][i];                    path[i] = path[k] + "-->" + i;//????·???????                }            }        }        //???·??        for(int i=1;i<=N;i++) {            System.out.println("??"+1+"??????"+i+"?????·?????"+path[i]);        }        System.out.println("=====================================");        for(int i = 1; i <= N; i++) {            System.out.println("??1??????" + i + "????????????" + minDistance[i]);        }        for (int i = 1; i <= N; i++) {            sum+=minDistance[i];        }        System.out.println(sum);    }    public static void main(String[] args) {        // TODO Auto-generated method stub        Scanner input = new Scanner(System.in);        System.out.print("???????????N????????M?? ");        N = input.nextInt();        //??        int m = input.nextInt();        max = 10000;        minDistance = new int[N+1];        distance = new int [N+1][N+1];        visit = new int[N+1];        path=new String[N+1];        for(int i = 1; i <= N; i++) {            for(int j = 1; j <= N; j++) {                if(i == j) {                    distance[i][j] = 0;                }else {                    distance[i][j] = max;//?????????????                }            }            minDistance[i] = max;//???????????????????????            path[i] = "1-->" + i;        }        System.out.println("??????" + m +"??????x??y??z?????x??y???????z????");        for(int i = 1; i <= m; i++) {            int start = input.nextInt();            int end = input.nextInt();            int length = input.nextInt();            distance[start][end] = length;        }        input.close();        Dijkstra();    }}