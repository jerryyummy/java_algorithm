import java.util.*;

public class Main {
    public static void main(String[] args) {
        Main main = new Main();

        // test cases are generated by ai
        StringBuilder textBuilder = new StringBuilder();
        for (int i = 0; i < 6000; i++) {
            textBuilder.append("a");
        }
        String text = textBuilder.toString();

        StringBuilder patternBuilder = new StringBuilder();
        for (int i = 0; i < 500; i++) {
            patternBuilder.append("a");
        }
        patternBuilder.append("x");
        String pattern = patternBuilder.toString();

        main.runDualTest("Test Case 1: Long Repetitive Prefix (KMP vs Naive)", text, pattern);

        main.runTest(
                "Test Case 2: Repetitive Characters (KMP Only)",
                "aaaaaaaaaaaaaaaaa",
                "aaaaa"
        );

        main.runTest(
                "Test Case 3: No Match (KMP Only)",
                "abcde",
                "xyz"
        );
    }

    public static boolean judge(char[][] matrix) {
        int black = 0;
        int white = 0;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                if (matrix[i][j] == 'a') {
                    black++;
                }
                if (matrix[i][j] == 'x') {
                    white++;
                }
            }
        }
        if (!(black==white || black == white+1)) return false;


        boolean[][] visited = new boolean[matrix.length][matrix[0].length];
        int[][] directions = new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1},{-1,-1},{1,1},{1,-1},{-1,1}};
        boolean blackwin = false;
        boolean whitewin = false;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                if (matrix[i][j] == 'a') {
                    for (int[] direction : directions) {
                        int x = direction[0];
                        int y = direction[1];
                        if (dfs(matrix, i,j,x,y, visited, 0, 'a') ){
                            blackwin = true;
                        }
                    }
                }

                if (matrix[i][j] == 'x') {
                    for (int[] direction : directions) {
                        int x = direction[0];
                        int y = direction[1];
                        if (dfs(matrix, i,j,x,y, visited, 0, 'x') ){
                            whitewin = true;
                        }
                    }
                }
            }
        }

        // if (!blackwin && !whitewin) return false;
        boolean flag = false;
        if (blackwin && whitewin) return false;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                if (matrix[i][j] == 'x' || matrix[i][j] == 'a') {
                    if (check(matrix,i,j,matrix[i][j])) {
                        flag = true;
                    }
                }
            }
        }
        return flag;
    }

    public static boolean dfs(char[][] matrix, int row, int col, int x, int y, boolean[][] visited, int length, char color) {
        if (length >= 5) return true;
        visited[row][col] = true;
        while((row+x)>=0 && (row+x)<matrix.length && (col+y)>=0 && (col+y)<matrix[0].length && !visited[row+x][col+y] && color == matrix[row+x][col+y]) {
            if (dfs(matrix, row+x, col+y, x, y, visited, length+1, color)) return true;
            else break;
        }
        visited[row][col] = false;
        return false;
    }

    public static boolean check(char[][] matrix, int row, int col, char color) {
        matrix[row][col] = '0';
        boolean flag = true;

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                if (matrix[i][j] == color) {
                    int length = 0;
                    boolean[][] visited = new boolean[matrix.length][matrix[0].length];
                    int[][] directions = new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1},{-1,-1},{1,1},{1,-1},{-1,1}};
                    for (int[] direction : directions) {
                        int x = direction[0];
                        int y = direction[1];

                        visited[row][col] = true;
                        while((row+x)>=0 && (row+x)<matrix.length && (col+y)>=0 && (col+y)<matrix[0].length && !visited[row+x][col+y] && color == matrix[row+x][col+y]) {
                            if (matrix[row+x][col+y] == color && !visited[row+x][col+y]) {
                                visited[row+x][col+y] = true;
                                length++;
                            }
                            visited[row+x][col+y] = false;
                            if (length == 5){
                                flag = false;
                                break;
                            }
                        }
                        visited[row][col] = false;
                    }

                }

            }
        }
        matrix[row][col] = color;
        return flag;
    }

    public void runDualTest(String testName, String text, String pattern) {
        System.out.println("=======================================");
        System.out.println(testName);
        System.out.println("Text:    \"" + text + "\"");
        System.out.println("Pattern: \"" + pattern + "\"");

        // KMP
        long startKMP = System.nanoTime();
        MatchResult resultKMP = matchString(text, pattern);
        long endKMP = System.nanoTime();

        // Naive
        long startNaive = System.nanoTime();
        MatchResult resultNaive = naiveMatch(text, pattern);
        long endNaive = System.nanoTime();

        // print function are generated by ai
        System.out.println("→ [KMP Algorithm]");
        System.out.println("Match Position      : " + resultKMP.position);
        System.out.println("Match Attempts (i++)  : " + resultKMP.attempts);
        System.out.println("Character Comparisons : " + resultKMP.comparisons);
        System.out.println("Time Taken (μs)     : " + (endKMP - startKMP) / 1000);

        System.out.println("→ [Naive Algorithm]");
        System.out.println("Match Position      : " + resultNaive.position);
        System.out.println("Match Attempts (i++)  : " + resultNaive.attempts);
        System.out.println("Character Comparisons : " + resultNaive.comparisons);
        System.out.println("Time Taken (μs)     : " + (endNaive - startNaive) / 1000);

        System.out.println("=======================================\n");
    }

    public void runTest(String testName, String text, String pattern) {
        System.out.println("=======================================");
        System.out.println(testName);
        System.out.println("Text:    \"" + text + "\"");
        System.out.println("Pattern: \"" + pattern + "\"");

        long startTime = System.nanoTime();
        MatchResult result = matchString(text, pattern);
        long endTime = System.nanoTime();

        System.out.println("Match Position      : " + result.position);
        System.out.println("Text Length         : " + text.length());
        System.out.println("Pattern Length      : " + pattern.length());
        System.out.println("Match Attempts (i++)  : " + result.attempts);
        System.out.println("Character Comparisons : " + result.comparisons);
        System.out.println("Time Taken (μs)     : " + (endTime - startTime) / 1000);
        System.out.println("=======================================\n");
    }

    static class MatchResult {
        int position;
        int attempts;
        int comparisons;

        MatchResult(int position, int attempts, int comparisons) {
            this.position = position;
            this.attempts = attempts;
            this.comparisons = comparisons;
        }
    }

    public MatchResult matchString(String str, String pattern) {
        int[] lps = lps(pattern);
        int m = str.length();
        int n = pattern.length();

        int i = 0, j = 0;
        int attempts = 0;
        int comparisons = 0;

        while (i < m) {
            attempts++;
            comparisons++;
            if (str.charAt(i) == pattern.charAt(j)) {
                i++;
                j++;
                if (j == n) {
                    return new MatchResult(i - n, attempts, comparisons);
                }
            } else {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }
        return new MatchResult(-1, attempts, comparisons);
    }

    public MatchResult naiveMatch(String str, String pattern) {
        int m = str.length();
        int n = pattern.length();
        int attempts = 0;
        int comparisons = 0;

        for (int i = 0; i <= m - n; i++) {
            attempts++;
            int j;
            for (j = 0; j < n; j++) {
                comparisons++;
                if (str.charAt(i + j) != pattern.charAt(j)) {
                    break;
                }
            }
            if (j == n) {
                return new MatchResult(i, attempts, comparisons);
            }
        }

        return new MatchResult(-1, attempts, comparisons);
    }
    
    public int[] lps(String pattern) {
        int n = pattern.length();
        int[] res = new int[n];
        int i = 1, j = 0;

        while (i < n) {
            if (pattern.charAt(i) == pattern.charAt(j)) {
                j++;
                res[i] = j;
                i++;
            } else {
                if (j != 0) {
                    j = res[j - 1];
                } else {
                    res[i] = 0;
                    i++;
                }
            }
        }

        return res;
    }
}
